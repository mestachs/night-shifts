{"version":3,"sources":["support/XlsxPopulateOpenAsBlob.js","UploadXlsPage.js","App.js","serviceWorker.js","index.js"],"names":["XlsxPopulate","openAsBlob","workbook","filename","outputAsync","type","then","blob","window","navigator","msSaveOrOpenBlob","url","URL","createObjectURL","a","document","createElement","body","appendChild","href","download","click","revokeObjectURL","removeChild","UploadXlsPage","props","InputLabel","name","onChange","inputElement","files","target","length","file","fromDataAsync","fields","sheets","watches","doctorsSet","Set","forEach","sheet","range","value","filter","row","undefined","watch","fieldValue","index","includes","numberToDate","add","push","doctors","Array","from","sort","days","allStats","role","doctor","watches_doct","w","JSON","stringify","rawst","_","countBy","v","jour","st","total","day","stats","s","accept","helperText","useStyles","makeStyles","theme","root","width","margin","backgroundColor","height","paper","paddingBottom","paddingLeft","fab","position","bottom","spacing","right","asRows","map","stat","id","label","points","x","y","App","classes","useState","nightShits","setNightShits","setFilter","setFilterDebounced","debounce","maxWait","className","AppBar","color","Toolbar","IconButton","edge","menuButton","aria-label","Typography","variant","TextField","e","val","r","renderAxisTick","p","title","options","rowsPerPage","rowsPerPageOptions","filterType","print","selectableRows","data","columns","customBodyRender","toString","Date","getUTCDate","padStart","getUTCMonth","Boolean","location","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.abea6494.chunk.js","sourcesContent":["import XlsxPopulate from \"xlsx-populate\";\n\nXlsxPopulate.openAsBlob = (workbook, filename) => {\n  workbook.outputAsync({ type: \"blob\" }).then(function(blob) {\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      window.navigator.msSaveOrOpenBlob(blob, filename || \"out.xlsx\");\n    } else {\n      var url = window.URL.createObjectURL(blob);\n      var a = document.createElement(\"a\");\n      document.body.appendChild(a);\n      a.href = url;\n      a.download = filename || \"out.xlsx\";\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    }\n  });\n};\n\nexport default XlsxPopulate;\n","import XlsxPopulate from \"./support/XlsxPopulateOpenAsBlob\";\nimport React, { useState, useEffect } from \"react\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport _ from \"lodash\";\n\nfunction UploadXlsPage(props) {\n  function parseExcelFile(inputElement) {\n    const files = inputElement.target.files || [];\n    if (!files.length) return;\n    const file = files[0];\n    XlsxPopulate.fromDataAsync(file).then(function(workbook) {\n      const fields = [\n        \"jour\",\n        \"date\",\n        \"gpicnic\",\n        \"rnic\",\n        \"rsip\",\n        \"tnic\",\n        \"tsip\"\n      ];\n      const sheets = workbook.sheets();\n      const watches = [];\n      const doctorsSet = new Set();\n      sheets.forEach(sheet => {\n        sheet\n          .range(\"A2:G36\")\n          .value()\n          .filter(\n            row => row[0] !== null && row[0] !== \"\" && row[0] !== undefined\n          )\n          .forEach(row => {\n            const watch = {};\n            row.forEach((fieldValue, index) => {\n              let v = fieldValue;\n              if (\n                fieldValue &&\n                fieldValue.includes &&\n                fieldValue.includes(\"----\")\n              ) {\n                fieldValue = undefined;\n              }\n              if (fields[index] == \"date\") {\n                fieldValue = XlsxPopulate.numberToDate(fieldValue);\n              }\n              if (\n                [\"gpicnic\", \"rnic\", \"rsip\", \"tnic\", \"tsip\"].includes(\n                  fields[index]\n                )\n              ) {\n                doctorsSet.add(fieldValue);\n              }\n              watch[fields[index]] = fieldValue;\n            });\n            watch[\"month\"] = sheet.name();\n            watches.push(watch);\n          });\n      });\n\n      const doctors = Array.from(doctorsSet).sort();\n      const days = [\n        \"Lundi\",\n        \"Mardi\",\n        \"Mercredi\",\n        \"Jeudi\",\n        \"Vendredi\",\n        \"Samedi\",\n        \"Dimanche\"\n      ];\n\n      const roles = [\"gpicnic\", \"rnic\", \"rsip\", \"tnic\", \"tsip\", \"ALL\"];\n\n      const allStats = [];\n      roles.forEach(role => {\n        doctors.forEach(doctor => {\n          const watches_doct = watches.filter(w =>\n            role == \"ALL\"\n              ? JSON.stringify(w).includes(doctor)\n              : w[role] && w[role].includes(doctor)\n          );\n\n          const rawst = _.countBy(watches_doct, v => v.jour);\n          const st = { role: role };\n\n          st.doctor = doctor;\n          let total = 0;\n          days.forEach(day => {\n            st[day] = rawst[day];\n            if (rawst[day]) {\n              total += rawst[day];\n            }\n          });\n          st.total = total;\n          allStats.push(st);\n        });\n      });\n      const stats = allStats.filter(s => s.total !== 0);\n\n      props.onChange({ watches, stats });\n    });\n  }\n  return (\n    <>\n      <InputLabel>\n        Upload your xslx file. (not data transfered to any server)\n      </InputLabel>\n      <input\n        type=\"file\"\n        name=\"Xlsx\"\n        onChange={parseExcelFile}\n        accept=\".xlsx\"\n        helperText={\"Your xlsx file\"}\n      ></input>\n      <p>{}</p>\n    </>\n  );\n}\nexport default UploadXlsPage;\n","import React, { useState } from \"react\";\nimport MUIDataTable from \"mui-datatables\";\nimport _ from \"lodash\";\nimport \"./App.css\";\n\nimport { PunchCard } from \"react-punchcard\";\n\nimport { HashRouter as Router } from \"react-router-dom\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport UploadXlsPage from \"./UploadXlsPage\";\nimport { TextField } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"70%\",\n    margin: \"auto\",\n    backgroundColor: \"#eeeeee\",\n    height: \"100%\"\n  },\n  paper: {\n    paddingBottom: \"100%\",\n    paddingLeft: \"100px\",\n    backgroundColor: \"#eeeeee\"\n  },\n  fab: {\n    position: \"absolute\",\n    bottom: theme.spacing(2),\n    right: theme.spacing(2)\n  }\n}));\n\nconst asRows = stats => {\n  const rows = stats.map((stat, index) => {\n    // {\"role\":\"gpicnic\",\"doctor\":\"egs\",\"Lundi\":3,\"Mardi\":5,\"Mercredi\":3,\"Vendredi\":2,\"Samedi\":5,\"Dimanche\":2,\"total\":20}\n    return {\n      id: \"row-\" + index,\n      label: stat.role + \" \" + stat.doctor,\n      points: [\n        { x: 1, y: stat[\"Lundi\"] || 0, label: \"Lundi\" },\n        { x: 2, y: stat[\"Mardi\"] || 0, label: \"Mardi\" },\n        { x: 3, y: stat[\"Mercredi\"] || 0, label: \"Me\" },\n        { x: 4, y: stat[\"Jeudi\"] || 0, label: \"Je\" },\n        { x: 5, y: stat[\"Vendredi\"] || 0, label: \"Ve\" },\n        { x: 6, y: stat[\"Samedi\"] || 0, label: \"Sa\" },\n        { x: 7, y: stat[\"Dimanche\"] || 0, label: \"Di\" }\n      ]\n    };\n  });\n  debugger;\n\n  return rows;\n};\n\nfunction App() {\n  const classes = useStyles();\n  const [nightShits, setNightShits] = useState(undefined);\n\n  const [filter, setFilter] = useState(\"SMEE\");\n  const setFilterDebounced = _.debounce(setFilter, 250, {\n    maxWait: 1000\n  });\n  const onFilterChange = e => {\n    const val = e.target.value;\n    setFilterDebounced(val);\n  };\n\n  return (\n    <Router>\n      <div className={classes.root}>\n        <AppBar position=\"static\" color=\"primary\">\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"menu\"\n              href={\"#/recipes/\"}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Evaluate your night shift planning.\n            </Typography>\n          </Toolbar>\n        </AppBar>\n\n        <TextField onChange={onFilterChange} />\n\n        {nightShits == undefined && <UploadXlsPage onChange={setNightShits} />}\n        {nightShits && (\n          <PunchCard\n            value={asRows(nightShits.stats).filter(r =>\n              r.label.includes(filter)\n            )}\n            renderAxisTick={p => <span>{p.label}</span>}\n          />\n        )}\n        {nightShits && (\n          <MUIDataTable\n            title={\"Stats per role & doctor\"}\n            options={{\n              rowsPerPage: 30,\n              rowsPerPageOptions: [30, 300, 1000],\n              filterType: \"dropdown\",\n              print: false,\n              selectableRows: \"none\"\n            }}\n            data={nightShits.stats.filter(\n              s => s.doctor.includes(filter) || s.role.includes(filter)\n            )}\n            columns={[\n              \"role\",\n              \"doctor\",\n              \"Lundi\",\n              \"Mardi\",\n              \"Mercredi\",\n              \"Vendredi\",\n              \"Samedi\",\n              \"Dimanche\",\n              \"total\"\n            ].map(name => {\n              return {\n                name: name,\n                options: {\n                  filter: true,\n                  customBodyRender: v => (v ? v.toString() : \"\")\n                }\n              };\n            })}\n          />\n        )}\n        {nightShits && (\n          <MUIDataTable\n            title={\"Scheduled night shifts\"}\n            options={{\n              rowsPerPage: 30,\n              rowsPerPageOptions: [20, 300, 1000],\n              filterType: \"dropdown\",\n              print: false,\n              selectableRows: \"none\"\n            }}\n            data={nightShits.watches.filter(s =>\n              JSON.stringify(s).includes(filter)\n            )}\n            columns={[\n              \"jour\",\n              \"date\",\n              \"gpicnic\",\n              \"rnic\",\n              \"rsip\",\n              \"tnic\",\n              \"tsip\",\n              \"month\"\n            ].map(name => {\n              return {\n                name: name,\n                options: {\n                  filter: true,\n                  customBodyRender: v =>\n                    v\n                      ? v instanceof Date\n                        ? v\n                            .getUTCDate()\n                            .toString()\n                            .padStart(2, \"0\") +\n                          \"/\" +\n                          (v.getUTCMonth() + 1).toString().padStart(2, \"0\")\n                        : v\n                      : \"\"\n                }\n              };\n            })}\n          />\n        )}\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}